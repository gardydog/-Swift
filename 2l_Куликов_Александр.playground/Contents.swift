import UIKit

//–ó–∞–¥–∞–Ω–∏–µ 1. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ—Ç.
//–§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —á—ë—Ç–Ω–æ—Å—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –≤–∏–¥–µ –¥–∞/–Ω–µ—Ç (—É –Ω–∞—Å –¥–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö)

func ChetnoeChislo (_ Chislo: Int) -> Bool {
    return Chislo % 2 == 0
}
    var x = ChetnoeChislo(10)
   // x = Double(y) - –í–û–ü–†–û–°: –Ø –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω—è–ª, —á—Ç–æ –∏–∑ —Ç–∏–ø–∞ Bool —É–∂–µ –Ω–µ–ª—å–∑—è –≤–µ—Ä–Ω—É—Ç—å —á–∏—Å–ª–æ?
if x == true {
    print("–ß–∏—Å–ª–æ —á—ë—Ç–Ω–æ–µ!")
} else if x == false {
    print("–ß–∏—Å–ª–æ –Ω–µ—á—ë—Ç–Ω–æ–µ!")
}

//–ó–∞–¥–∞–Ω–∏–µ 2. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–µ–ª–∏—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞ –Ω–∞ 3.
//–ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –Ω–æ —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –Ω–µ–π –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è.

let y = 99
func Multiple_Number_3 (_ Chislo: Int) -> Bool {
    return Chislo % 3 == 0
}
    Multiple_Number_3(y)
    
//–í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∫–∏ (–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–±—Ä–∞—Ç—å //):
//func Multiple_Number_4 (_ Chislo: Int) {
//    Chislo % 3 == 0 ? "–ß–∏—Å–ª–æ –ù–ï –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 3 –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞" : "–ß–∏—Å–ª–æ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 3 –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞"
//}
//    Multiple_Number_4(4)


//–ó–∞–¥–∞–Ω–∏–µ 3. –°–æ–∑–¥–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç–∞—é—â–∏–π –º–∞—Å—Å–∏–≤ –∏–∑ 100 —á–∏—Å–µ–ª.
//–õ—é–±—ã–º —É–¥–æ–±–Ω—ã–º –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–±–æ–º –∑–∞–¥–∞–π—Ç–µ –º–∞—Å—Å–∏–≤ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É.

var Arr1: [Int] = Array()
for numbers in 1...100 {
    Arr1.append(numbers)
}
    Arr1

//–ó–∞–¥–∞–Ω–∏–µ 4. –£–¥–∞–ª–∏—Ç—å –∏–∑ —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤—Å–µ —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –∏ –≤—Å–µ —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 3.
//–ü–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫ —ç—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —É—á–∏—Ç—ã–≤–∞—è —Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–ª–∏ –Ω–∞ —É—Ä–æ–∫–µ. –°—É—â–µ—Å—Ç–≤—É–µ—Ç –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–æ—Å–æ–±–æ–≤ —Ä–µ—à–∏—Ç—å –¥–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.

var Arr2: [Int] = Array()

//–ü–µ—Ä–≤—ã–π —Å–ø–æ—Å–æ–± –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:
for numbers in Arr1 {
    if numbers % 2 != 0 {
        if numbers % 3 == 0 {
            Arr2.append(Int(numbers))
        }
    }
}
//–í—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–± –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:
func remove (_ numbers: Int) -> Int {
    if numbers % 2 != 0 {
        if numbers % 3 == 0 {
        }
    }
    return numbers
}
    //remove(Arr1)
//–í–û–ü–†–û–°: –ü–æ—á–µ–º—É –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–∏–º —Å–ø–æ—Å–æ–±–æ–º –∏ –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ Int8, –∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—à—å, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "-1" :-(

var remove = Arr1.filter {$0 % 2 != 0 && $0 % 3 == 0}
   print(remove)
//–í–û–ü–†–û–°: –ß—Ç–æ —Ç–∞–∫–æ–µ $0? –≠—Ç–æ –Ω–∞—à–µ–ª –Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ä–∞—Ö –∏–Ω–µ—Ç–∞) –û—á–µ–Ω—å –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Å–ø–æ—Å–æ–± —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–∞—Å—Å–∏–≤–∞ –ø–æ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞–º! –û—á–µ–Ω—å –±—ã —Ö–æ—Ç–µ–ª–æ—Å—å, —á—Ç–æ–±—ã –í—ã –Ω–∞–º —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ –æ –Ω–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–Ω—è—Ç–∏–∏!


//–ó–∞–¥–∞–Ω–∏–µ 5.* –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –º–∞—Å—Å–∏–≤ –Ω–æ–≤–æ–µ —á–∏—Å–ª–æ –§–∏–±–æ–Ω–∞—á—á–∏, –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –Ω–µ–µ 50 —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
//–ß–∏—Å–ª–∞ –§–∏–±–æ–Ω–∞—á—á–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏ Fn=Fn-1 + Fn-2, —Ç–æ –µ—Å—Ç—å –∫–∞–∂–¥–æ–µ –ø–æ—Å–ª–µ–¥—É—é—â–µ–µ —á–∏—Å–ª–æ —è–≤–ª—è–µ—Ç—Å—è —Å—É–º–º–æ–π –¥–≤—É—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –¥–≤—É—Ö –µ–¥–∏–Ω–∏—Ü (1, 1), –∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ.

//–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É
//func fiboNachal (_ numbers1: Int) -> Double {
//    var masForFibo: [Double] = [1, 1]
//    masForFibo.forEach { i in
//        masForFibo.append(masForFibo[Int(i) - 1] + masForFibo[Int(i) - 2])
//    }
//    return masForFibo
//}
//print(fiboNachal(100))

//–í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞
func fibo(_ numbers1: Int) -> [Double] {
    var Arr0: [Double] = [1, 1]
    for i in Arr0 {  // - –ø–æ–¥–æ–∑—Ä–µ–≤–∞—é, —á—Ç–æ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å–æ 2-–≥–æ –Ω–æ–º–µ—Ä–∞ –∏–Ω–¥–µ–∫—Å–∞, –Ω–æ –∫–∞–∫?
        Arr0.append(Arr0[Int(i) - 1] + Arr0[Int(i) - 2]) //Int swift —Å–∞–º –∑–∞—Å—Ç–∞–≤–∏–ª –ø—Ä–∏–ø–∏—Å–∞—Ç—å
    }
    return Arr0
}
    //print(fibo(50)) - //–í —ç—Ç–æ–π —Å—Ç—Ä–æ—á–∫–µ –≤—ã–¥–∞–µ—Ç —Ñ–∞—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É. –í–û–ü–†–û–°: –ö–∞–∫ –∂–∏—Ç—å –¥–∞–ª—å—à–µ?(


//–ó–∞–¥–∞–Ω–∏–µ 6. * –ó–∞–ø–æ–ª–Ω–∏—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑ 100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —á–∏—Å–ª–∞–º–∏. –ù–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –±–æ–ª—å—à–µ–µ –µ–¥–∏–Ω–∏—Ü—ã, –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º, –µ—Å–ª–∏ –æ–Ω–æ –¥–µ–ª–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ–±—è –∏ –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É.

func PrimalNumbers (ArrayInput: [Int]) -> [Int] {
    var Mas1: [Int] = []
    for i in ArrayInput {
        if i > 1 {
            if i / i == 1 {
                Mas1.append(i)
            }
        }
    }
    return Mas1
}
print("\n", PrimalNumbers(ArrayInput: Array(2...100)))
//–°–ª–æ–∂–Ω–∞..
//a. –í—ã–ø–∏—Å–∞—Ç—å –ø–æ–¥—Ä—è–¥ –≤—Å–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –æ—Ç –¥–≤—É—Ö –¥–æ n (2, 3, 4, ..., n).
//b. –ü—É—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è p –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Ä–∞–≤–Ω–∞ –¥–≤—É–º ‚Äî –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ—Å—Ç–æ–º—É —á–∏—Å–ª—É.
//c. –ó–∞—á–µ—Ä–∫–Ω—É—Ç—å –≤ —Å–ø–∏—Å–∫–µ —á–∏—Å–ª–∞ –æ—Ç 2 + p –¥–æ n, —Å—á–∏—Ç–∞—è —à–∞–≥–æ–º p..
//d. –ù–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ –Ω–µ –∑–∞—á—ë—Ä–∫–Ω—É—Ç–æ–µ —á–∏—Å–ª–æ –≤ —Å–ø–∏—Å–∫–µ, –±–æ–ª—å—à–µ–µ, —á–µ–º p, –∏ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—é –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π p —ç—Ç–æ —á–∏—Å–ª–æ.
//e. –ü–æ–≤—Ç–æ—Ä—è—Ç—å —à–∞–≥–∏ c –∏ d, –ø–æ–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ.
//
//–£—á—Ç–∏—Ç–µ, —á—Ç–æ –∑–¥–µ—Å—å –≤—ã –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞—ë—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã—Ö —á–∏—Å–µ–ª, –∞ –Ω–µ —Ç–æ –∫–æ–ª—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–ª—É—á–∏—Ç–µ –≤ –∏—Ç–æ–≥–µ (–ø–æ –∑–∞–¥–∞–Ω–∏—é 100 –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª), –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ n.


//–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ó–ê–î–ê–ß–ö–ò –ò–ó –§–ê–ô–õ–ê:
//1. –ó–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ a –∏ —Å—Ç–µ–ø–µ–Ω—å b. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è ùëéùëè, –≤—ã–∑–≤–∞—Ç—å –µ—ë –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å. (a ‚â• 0, b ‚â• 0)

func power (a: Double, b: Double) -> Double {
    let c = pow(a, b)
    return c
}
print("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∫–∏: ", "\n", "–ó–∞–¥–∞—á–∞ 1: ", "\n", power(a: 2.0, b: 5.0), "\n", power(a: 16, b: 0), "\n", power(a: 0, b: 0))

//2. –ó–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ n. –í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ü–∏—Ñ—Ä—ã, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç —á–∏—Å–ª–æ, –∫–∞–∂–¥–æ–µ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ. (n ‚â• 0)

func terminator(n: Int) {
    let s = String(n)
    for char in s {
        print("\(char)", terminator: "\n")
    }
}
terminator(n: 12345) //–°–Ω–∞—á–∞–ª–∞ –ª–æ–º–∞–ª –≥–æ–ª–æ–≤—É –Ω–∞–¥ —Ç–µ–º, –∫–∞–∫ –æ—Ç—Å–µ–∏–≤–∞—Ç—å –∫–∞–∂–¥—É—é —Ü–∏—Ñ—Ä—É –≤ —á–∏—Å–ª–µ —Å –ø–æ–º–æ—â—å—é while n > 0, n / 10, –Ω–æ –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ( –ü—Ä–∏—à–ª–æ—Å—å –∫–æ–ª—Ö–æ–∑–∏—Ç—å))

//3. –ó–∞–¥–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ s. –í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ—è—Ç –Ω–∞ —á–µ—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö (–ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª —Å—Ç—Ä–æ–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ 0). (–¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è)

//–í–û–ü–†–û–°: –ü–æ—á–µ–º—É –æ—à–∏–±–∫–∞?
//func terminator(_ s: String) {
//    var string = ""
//    for char in stride(from: s.characters.first, to: s.characters.last, by: 2) {
//        print("\(char)", terminator: "\n")
//    }
//}
//terminator("orange")

//4. –ó–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ count. –í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É ‚Äúapple‚Äù, –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.

var count: Int = 3

//for _ in 1...count {
//    print("apple", terminator: ",") //–í–û–ü–†–û–°: –≠—Ç–æ—Ç —Ü–∏–∫–ª –¥–∞–∂–µ –≤ —Ç–µ–æ—Ä–∏–∏ –∑–¥–µ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è?
//}

while count > 0 {
    print("apple", terminator: ",")
    count -= 1
}

//5. –î–∞–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ x1 (–ó–Ω–∞—á–µ–Ω–∏–µ —Ö —É–∂–µ –∑–∞–Ω—è—Ç–æ). –ü–æ—Å—á–∏—Ç–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏–µ 1 + 2x + 3x^2 + 4x^3 –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π (–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å pow, –∞ —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã).

let x1: Int = 5
let y1 = 1 + (2 * x1) + (3 * x1 * x1) + (4 * x1 * x1 * x1)
print("\n", "\n", y1)

//–ß—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —è —Å–¥–µ–ª–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ)) –°–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ.. –ü–æ–¥—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –±—ã–ª–æ –Ω—É–∂–Ω–æ? –ë—ã–ª–∞ –º—ã—Å–ª—å —Ä–∞–∑–≤–µ —á—Ç–æ –æ —Ç–æ–º, —á—Ç–æ–±—ã —Ä–∞–∑–ª–æ–∂–∏—Ç—å —ç—Ç–æ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞ –º–Ω–æ–≥–æ—á–ª–µ–Ω, —Ç–∞–∫ –±—ã–ª–æ –æ–Ω–æ —Å—Ç–∞–ª–æ –º–µ–Ω–µ–µ –≥—Ä–æ–º–æ–∑–¥–∫–∏–º, –Ω–æ –≤—Ä—è–¥ –ª–∏.


// 6. –ü–æ–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ –∑–∞–¥–∞–Ω—ã –¥–≤–µ –¥–∞—Ç—ã. –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–∫–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ. –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:

let day1 = 5, month1 = 1, year1 = 2021
let day2 = 1, month2 = 1, year2 = 2021

if year1 > year2 {
    print("–ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ!")
} else if year1 < year2 {
    print("–í—Ç–æ—Ä–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ!")
} else if month1 > month2 {
    print("–ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ!")
} else if month1 < month2 {
    print("–í—Ç–æ—Ä–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ!")
} else if day1 > day2 {
    print("–ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ!")
} else if day2 < day1 {
    print("–í—Ç–æ—Ä–∞—è –¥–∞—Ç–∞ –±–æ–ª—å—à–µ!")
} else {
    print("–î–∞—Ç—ã —Ä–∞–≤–Ω—ã!")
}
//–í–û–ü–†–û–°: –ö–∞–∫ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–æ—Ä–æ—á–µ?
